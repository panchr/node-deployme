#!/usr/bin/env node

// deploy.js
// Rushy Panchal
// Licensed under GPL v2.0
// Part of the deployme package

var fs = require("fs");

var minimist = require("minimist"),
	prompt = require("prompt"),
	_ = require("underscore"),
	glob = require("glob"),
	Deployer = require("../deployer");

// Global configuration

var INPUT_PROPERTIES= [
	{name: "host", description: "Host:".green},
	{name: "port", description: "Port:".green},
	{name: "username", description: "Username:".green},
	{name: "password", description: "Password:".green, hidden: true},
	{name: "localRoot", description: "Root Local Directory:".green},
	{name: "localDirectories", description: "Local directories:".green},
	{name: "localFiles", description: "Local files:".green},
	{name: "remoteRoot", description: "Root Remote Directory:".green}
	];

var HELP_DATA = {
	"help": "Displays the help data",
	"init": "Initialize the deploy script configuration",
	"reset": "Delete the configuration and start over",
	"view": "View the current configuration",
	"diff": "Get a list of changes to be synced",
	"sync": "Push the changes to the server",
	"local add": "Add local paths to the be synced",
	"local remove": "Remove local paths to be synced",
	"local root": "Change the local root path",
	"remote root": "Change the remote root path",
	}

var MESSAGES = {
	help: "Welcome to deployme! This is a command-line-interface (CLI) tool \
to deploy mostly static content to servers, that would \
otherwise add too much bulk to a git repository.\ndeployme's commands are listed below.\n",
	init: "Welcome to deployme! To start, let's set up some configuration.\
Delimit the list of local and remote files with commas. The lengths of each should be equal.",
	reset: "Reseting current configuration and restarting project.",
	}

prompt.message = "";
prompt.delimiter = "";

var project = new Deployer(".deploy-config");
// use "glob" module to find files
function main() {
	// Main function
	var cli = minimist(process.argv);
	var cmds = cli._;
	command = function(key, index) {
		if (index != undefined && index != "undefined")
			return key == cmds[index];
		return (cli[key] || _.contains(cmds, key));
		};

	if (command("help")) {
		console.log(MESSAGES.help);
		for (var key in HELP_DATA) {
			console.log("\t" + key.green + ": " + HELP_DATA[key]);
			}
		}
	else if (command("init"))
		initializeProject(MESSAGES.init);
	else if (command("reset"))
		initializeProject(MESSAGES.reset);
	else {
		project.initialize(); // load configuration and connect to the server

		if (command("view"))
			closeProject(project.config);
		else if (command("diff")) {
			project.connect().calculate();
			if (! project.status.syncCalculated) {
				project.once('sync-calculated', function () {
					closeProject(project.toSync);
					});
				}
			else
				closeProject(project.toSync);
			}
		else if (command("sync")) {
			project.run();
			if (project.status.syncCompleted) closeProject();
			else project.once('done', closeProject);
			}
		else if (command("remote")) {
			remoteIndex = cmds.indexOf("remote");
			if (command("root", remoteIndex + 1))
				changeRoot("remote", cmds);
			else
				error("Remote command not recognized!");
			}
		else if (command("local")) {
			localIndex = cmds.indexOf("local");
			if (command("root", localIndex + 1))
				changeRoot("local", cmds);
			else
				changeSyncPaths("local", cmds);
			}
		else
			error("Command not found!");
		}
	}

function closeProject(message) {
	// Closes the project and exits the process
	if (message)
		console.log(message);
	project.close();
	process.exit(0);
	}

function error(message) {
	// Print out a message and exit the process
	console.log(message);
	project.close();
	process.exit(1);
	}

function initializeProject(promptString) {
	// Initialize the project
	console.log(promptString);
	prompt.start();
	prompt.get(INPUT_PROPERTIES, function (err, result) {
		if (err) throw err;
		var config = {
			host: result.host,
			port: result.port,
			username: result.username,
			password: result.password,
			local: {
				root: result.localRoot,
				directories: _.map(result.localDirectories.split(", "), function (dirPath) {return "/" + dirPath}),
				files: result.localFiles.split(", ")
				},
			remote: {
				root: result.remoteRoot,
				}
			};
		project.config = config;
		project.save();
		console.log("Deploy configuration file, " + project.configurationPath.green + ", created with the provided options.\nDone initializing project!");
		process.exit(0);
		});
	}

function changeRoot(type, cmds) {
	// Changes a root path
	var index = cmds.indexOf(type);
	var newRoot = cmds[index + 2];
	if (! newRoot)
		error("No " + type + " path provided!");
	else {
		project.config[type].root = newRoot;
		project.save();
		closeProject("New " + type + " Path: " + newRoot);
		}
	}

function changeSyncPaths(type, cmds) {
	// Changes a sync path
	var index = cmds.indexOf(type);
	var typeChange = cmds[index + 1]; // add or remove
	var path = cmds[index + 2]; // file path
	if (! path)
		error(type + " path to " + typeChange + " not provided!");
	else if (glob.hasMagic(path)) { // globular pattern
		paths = glob.sync(path);
		for (var index = 0; index < paths.length; index++) {
			addPath(type, typeChange, paths[index]);
			}
		}
	else addPath(type, typeChange, path);
	project.save();
	console.log(type + " " + typeChange + ": " + path);
	}

function addPath(type, typeChange, path) {
	// Adds a project to the configuration
	try {
		var configPath = categorizePath(path);
		}
	catch (e) { // cannot identify file
		console.log(type + ": file/directory " + path + " does not exist.");
		return;
		}
	var array = project.config[type][configPath];
	if (typeChange == "add") {
		if (array.indexOf(path) == -1) array.push(path);
		console.log(type + " added: " + path);
		}
	else if (typeChange == "remove") {
		var pathIndex = array.indexOf(path);
		if (pathIndex == -1)
			error(type + " path to " + typeChange + " not found in configuration: " + path);
		else {
			array.splice(pathIndex, pathIndex);
			console.log(type + " removed: " + path);
			}
		}
	else
		error(type + " command not recognized!");
	}

function categorizePath(path) {
	// Determine whether a path is a directory or a file
	return fs.lstatSync(path).isDirectory() ? "directories": "files";
	}

main();
